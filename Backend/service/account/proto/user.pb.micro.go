// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user.proto

package proto

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserService service

func NewUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserService service

type UserService interface {
	Signup(ctx context.Context, in *ReqSignup, opts ...client.CallOption) (*ResSignup, error)
	Login(ctx context.Context, in *ReqLogin, opts ...client.CallOption) (*ResLogin, error)
	Logout(ctx context.Context, in *ReqLogout, opts ...client.CallOption) (*ResLogout, error)
	DeleteAccount(ctx context.Context, in *ReqDeleteAccount, opts ...client.CallOption) (*ResDeleteAccount, error)
	UserInfo(ctx context.Context, in *ReqUserInfo, opts ...client.CallOption) (*ResUserInfo, error)
	UserFiles(ctx context.Context, in *ReqUserFiles, opts ...client.CallOption) (*ResUserFiles, error)
	UserFileRename(ctx context.Context, in *ReqUserFileRename, opts ...client.CallOption) (*ResUserFileRename, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) Signup(ctx context.Context, in *ReqSignup, opts ...client.CallOption) (*ResSignup, error) {
	req := c.c.NewRequest(c.name, "UserService.Signup", in)
	out := new(ResSignup)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Login(ctx context.Context, in *ReqLogin, opts ...client.CallOption) (*ResLogin, error) {
	req := c.c.NewRequest(c.name, "UserService.Login", in)
	out := new(ResLogin)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Logout(ctx context.Context, in *ReqLogout, opts ...client.CallOption) (*ResLogout, error) {
	req := c.c.NewRequest(c.name, "UserService.Logout", in)
	out := new(ResLogout)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeleteAccount(ctx context.Context, in *ReqDeleteAccount, opts ...client.CallOption) (*ResDeleteAccount, error) {
	req := c.c.NewRequest(c.name, "UserService.DeleteAccount", in)
	out := new(ResDeleteAccount)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UserInfo(ctx context.Context, in *ReqUserInfo, opts ...client.CallOption) (*ResUserInfo, error) {
	req := c.c.NewRequest(c.name, "UserService.UserInfo", in)
	out := new(ResUserInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UserFiles(ctx context.Context, in *ReqUserFiles, opts ...client.CallOption) (*ResUserFiles, error) {
	req := c.c.NewRequest(c.name, "UserService.UserFiles", in)
	out := new(ResUserFiles)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UserFileRename(ctx context.Context, in *ReqUserFileRename, opts ...client.CallOption) (*ResUserFileRename, error) {
	req := c.c.NewRequest(c.name, "UserService.UserFileRename", in)
	out := new(ResUserFileRename)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	Signup(context.Context, *ReqSignup, *ResSignup) error
	Login(context.Context, *ReqLogin, *ResLogin) error
	Logout(context.Context, *ReqLogout, *ResLogout) error
	DeleteAccount(context.Context, *ReqDeleteAccount, *ResDeleteAccount) error
	UserInfo(context.Context, *ReqUserInfo, *ResUserInfo) error
	UserFiles(context.Context, *ReqUserFiles, *ResUserFiles) error
	UserFileRename(context.Context, *ReqUserFileRename, *ResUserFileRename) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		Signup(ctx context.Context, in *ReqSignup, out *ResSignup) error
		Login(ctx context.Context, in *ReqLogin, out *ResLogin) error
		Logout(ctx context.Context, in *ReqLogout, out *ResLogout) error
		DeleteAccount(ctx context.Context, in *ReqDeleteAccount, out *ResDeleteAccount) error
		UserInfo(ctx context.Context, in *ReqUserInfo, out *ResUserInfo) error
		UserFiles(ctx context.Context, in *ReqUserFiles, out *ResUserFiles) error
		UserFileRename(ctx context.Context, in *ReqUserFileRename, out *ResUserFileRename) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) Signup(ctx context.Context, in *ReqSignup, out *ResSignup) error {
	return h.UserServiceHandler.Signup(ctx, in, out)
}

func (h *userServiceHandler) Login(ctx context.Context, in *ReqLogin, out *ResLogin) error {
	return h.UserServiceHandler.Login(ctx, in, out)
}

func (h *userServiceHandler) Logout(ctx context.Context, in *ReqLogout, out *ResLogout) error {
	return h.UserServiceHandler.Logout(ctx, in, out)
}

func (h *userServiceHandler) DeleteAccount(ctx context.Context, in *ReqDeleteAccount, out *ResDeleteAccount) error {
	return h.UserServiceHandler.DeleteAccount(ctx, in, out)
}

func (h *userServiceHandler) UserInfo(ctx context.Context, in *ReqUserInfo, out *ResUserInfo) error {
	return h.UserServiceHandler.UserInfo(ctx, in, out)
}

func (h *userServiceHandler) UserFiles(ctx context.Context, in *ReqUserFiles, out *ResUserFiles) error {
	return h.UserServiceHandler.UserFiles(ctx, in, out)
}

func (h *userServiceHandler) UserFileRename(ctx context.Context, in *ReqUserFileRename, out *ResUserFileRename) error {
	return h.UserServiceHandler.UserFileRename(ctx, in, out)
}
